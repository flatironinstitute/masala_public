/*
    Masala
    Copyright (C) 2022 Vikram K. Mulligan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/// @file src/core_api/base_classes/selectors/atom_selectors/AtomSelection.fwd.hh
/// @brief Header for a pure virtual base class for AtomSelections.
/// @details AtomSelections are generated by AtomSelectors, and provide a list of a
/// subset of atoms to select.  They are dependent on the current Pose.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).

#ifndef Masala_src_core_api_base_classes_selectors_atom_selectors_AtomSelection_hh
#define Masala_src_core_api_base_classes_selectors_atom_selectors_AtomSelection_hh

// Parent class:
#include <core_api/base_classes/selectors/Selection.hh>

// Forward declarations:
#include <core_api/base_classes/selectors/atom_selectors/AtomSelection.fwd.hh>
#include <core_api/auto_generated_api/chemistry/atoms/AtomInstance_API.fwd.hh>

// Core headers:
#include <core_api/types.hh>

// Base headers:
#include <base/MasalaObject.hh>

// STL headers:
#include <vector>

namespace masala {
namespace core_api {
namespace base_classes {
namespace selectors {
namespace atom_selectors {

/// @brief A pure virtual base class for AtomSelections.
/// @details AtomSelections are generated by AtomSelectors, and provide a list of a
/// subset of atoms to select.  They are dependent on the current Pose.
/// @note Since this class does not implement class_name() or class_namespace()
/// functions required by the MasalaObject base class, it remains pure virtual.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).
class AtomSelection : public masala::core_api::base_classes::selectors::Selection {

public:

	/// @brief Default constructor.
	AtomSelection() = default;

	/// @brief Copy constructor.
	AtomSelection( AtomSelection const & ) = default;

	/// @brief Destructor.
	~AtomSelection() override = default;

public:

////////////////////////////////////////////////////////////////////////////////
// PUBLIC MEMBER FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

	/// @brief Get the name of this class ("AtomSelection").
	std::string class_name() const override;

	/// @brief Get the namespace of this class ("masala::core_api::base_classes::selectors::atom_selectors").
	std::string class_namespace() const override;

    /// @brief Get the category or categories for this plugin class.
    /// @returns { { "Selection", "AtomSelection" } }
    /// @note Categories are hierarchical (e.g. Selector->AtomSelector->AnnotatedRegionSelector,
    /// stored as { {"Selector", "AtomSelector", "AnnotatedRegionSelector"} }). A plugin can be
    /// in more than one hierarchical category (in which case there would be more than one
    /// entry in the outher vector), but must be in at least one.  The first one is used as
    /// the primary key.
    std::vector< std::vector< std::string > >
    get_categories() const override;

    /// @brief Get the keywords for this plugin class.
    /// @returns { "masala", "core", "selection", "atom_selection" }
    std::vector< std::string >
    get_keywords() const override;

	/// @brief Ensure that an atom selection has enough memory allocated so that it
	/// can store at least N atoms.
	/// @details Calls STL vector reserve() function, which suggests memory allocation.
	void reserve( core_api::Size const n_atoms );

	/// @brief Suggest deallocation of unused storage capacity.
	/// @details Calls STL vector shrink_to_fit() function, which suggests memory deallocation.
	void shrink_to_fit();

	/// @brief Add an atom to the selection
	void add_atom( core_api::auto_generated_api::chemistry::atoms::AtomInstance_APICSP const & atom_in );

	/// @brief Get the number of selected atoms in this selection.
	core_api::Size num_selected_atoms() const;

private:

////////////////////////////////////////////////////////////////////////////////
// PRIVATE MEMBER VARIABLES
////////////////////////////////////////////////////////////////////////////////

	std::vector< core_api::auto_generated_api::chemistry::atoms::AtomInstance_APICWP > atoms_;

}; // class AtomSelection

} // namespace atom_selectors
} // namespace selectors
} // namespace base_classes
} // namespace core_api
} // namespace masala

#endif // Masala_src_core_api_base_classes_selectors_AtomSelection_hh