/*
    Masala
    Copyright (C) 2022 Vikram K. Mulligan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/// @file src/core/selection/atom_selection/AtomSelection.fwd.hh
/// @brief A base class for AtomSelections.
/// @details AtomSelections are generated by AtomSelectors, and provide a list of a
/// subset of atoms to select.  They are dependent on the current Pose.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).

// Unit header:
#include <core/selection/atom_selection/AtomSelection.hh>

// Core headers:
#include <core/chemistry/atoms/AtomInstanceConstIterator.hh>

// Base headers:
#include <base/utility/container/container_util.tmpl.hh>

// STL headers:
#include <string>

namespace masala {
namespace core {
namespace selection {
namespace atom_selection {

////////////////////////////////////////////////////////////////////////////////
// PUBLIC MEMBER FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

/// @brief Get the name of this class ("AtomSelection").
std::string
AtomSelection::class_name() const {
	return "AtomSelection";
}

/// @brief Get the namespace of this class ("masala::core::selection::atom_selection").
std::string
AtomSelection::class_namespace() const {
	return "masala::core::selection::atom_selection";
}

/// @brief Get the category or categories for this plugin class.
/// @returns { { "Selection", "AtomSelection" } }
/// @note Categories are hierarchical (e.g. Selector->AtomSelector->AnnotatedRegionSelector,
/// stored as { {"Selector", "AtomSelector", "AnnotatedRegionSelector"} }). A plugin can be
/// in more than one hierarchical category (in which case there would be more than one
/// entry in the outher vector), but must be in at least one.  The first one is used as
/// the primary key.
std::vector< std::vector< std::string > >
AtomSelection::get_categories() const {
	return std::vector< std::vector< std::string > > {
		{ "Selection", "AtomSelection" }
	};
}

/// @brief Get the keywords for this plugin class.
/// @returns { "masala", "core", "selection", "atom_selection" }
std::vector< std::string >
AtomSelection::get_keywords() const {
	return std::vector< std::string > {
		"masala",
		"core",
		"selection",
		"atom_selection"
	};
}

/// @brief Add an atom to the selection
void
AtomSelection::add_atom(
	core::chemistry::atoms::AtomInstanceCSP const & atom_in
) {
	// Do not add if already in vector.
	if( !masala::base::utility::container::has_value( atoms_, atom_in ) ) {
		atoms_.insert( atom_in );
	}
}

/// @brief Get the number of selected atoms in this selection.
masala::core::Size
AtomSelection::num_selected_atoms() const {
	return atoms_.size();
}

/// @brief An iterator pointing to the first atom.
masala::core::chemistry::atoms::AtomInstanceConstIterator
AtomSelection::atoms_begin() const {
	return masala::core::chemistry::atoms::AtomInstanceConstIterator( atoms_.cbegin() );
}

/// @brief An iterator pointing to the element past the last atom.
masala::core::chemistry::atoms::AtomInstanceConstIterator
AtomSelection::atoms_end() const {
	return masala::core::chemistry::atoms::AtomInstanceConstIterator( atoms_.cend() );
}

} // namespace atom_selection
} // namespace selection
} // namespace core
} // namespace masala
