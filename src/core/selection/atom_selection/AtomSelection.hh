/*
    Masala
    Copyright (C) 2022 Vikram K. Mulligan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/// @file src/core/selection/atom_selection/AtomSelection.hh
/// @brief Header for a base class for AtomSelections.
/// @details AtomSelections are generated by AtomSelectors, and provide a list of a
/// subset of atoms to select.  They are dependent on the current Pose.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).

#ifndef Masala_src_core_selection_atom_selection_AtomSelection_hh
#define Masala_src_core_selection_atom_selection_AtomSelection_hh

// Parent class:
#include <core/selection/Selection.hh>

// Forward declarations:
#include <core/selection/atom_selection/AtomSelection.fwd.hh>
#include <core/chemistry/atoms/AtomInstance.fwd.hh>
#include <core/chemistry/atoms/AtomInstanceConstIterator.fwd.hh>

// Core headers:
#include <core/types.hh>

// Base headers:
#include <base/MasalaObject.hh>

// STL headers:
#include <set>
#include <mutex>

namespace masala {
namespace core {
namespace selection {
namespace atom_selection {

/// @brief A base class for AtomSelections.
/// @details AtomSelections are generated by AtomSelectors, and provide a list of a
/// subset of atoms to select.  They are dependent on the current Pose.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).
class AtomSelection : public masala::core::selection::Selection {

public:

////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTION, DESTRUCTION, AND ASSIGNMENT
////////////////////////////////////////////////////////////////////////////////

	/// @brief Default constructor.
	AtomSelection() = default;

	/// @brief Copy constructor.
	AtomSelection( AtomSelection const & src );

	/// @brief Assignment operator.
	AtomSelection &
	operator=(
		AtomSelection const & src
	);

	/// @brief Destructor.
	~AtomSelection() override = default;

	/// @brief Create a copy of this object.
	AtomSelectionSP
	clone() const;

	/// @brief Create a copy of this object that is independent of the original.
    /// @details Warning: doing so guarantees that the selection points to nothing.
	AtomSelectionSP
	deep_clone() const;

public:

////////////////////////////////////////////////////////////////////////////////
// PUBLIC MEMBER FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

	/// @brief Get the name of this class ("AtomSelection").
	std::string class_name() const override;

	/// @brief Get the namespace of this class ("masala::core::selection::atom_selection").
	std::string class_namespace() const override;

    /// @brief Get the API definition for this object.
    base::api::MasalaObjectAPIDefinitionCWP
    get_api_definition() override;

    /// @brief Get the category or categories for this plugin class.
    /// @returns { { "Selection", "AtomSelection" } }
    /// @note Categories are hierarchical (e.g. Selector->AtomSelector->AnnotatedRegionSelector,
    /// stored as { {"Selector", "AtomSelector", "AnnotatedRegionSelector"} }). A plugin can be
    /// in more than one hierarchical category (in which case there would be more than one
    /// entry in the outer vector), but must be in at least one.  The first one is used as
    /// the primary key.
    std::vector< std::vector< std::string > >
    get_categories() const override;

    /// @brief Get the keywords for this plugin class.
    /// @returns { "masala", "core", "selection", "atom_selection" }
    std::vector< std::string >
    get_keywords() const override;

	/// @brief Add an atom to the selection
	void add_atom( masala::core::chemistry::atoms::AtomInstanceCSP const & atom_in );

	/// @brief Get the number of selected atoms in this selection.
	masala::core::Size num_selected_atoms() const;

    /// @brief An iterator pointing to the first atom.
    masala::core::chemistry::atoms::AtomInstanceConstIterator
    atoms_begin() const;

    /// @brief An iterator pointing to the element past the last atom.
    masala::core::chemistry::atoms::AtomInstanceConstIterator
    atoms_end() const;

private:

////////////////////////////////////////////////////////////////////////////////
// PRIVATE MEMBER VARIABLES
////////////////////////////////////////////////////////////////////////////////

    /// @brief A mutex for locking this object.
    mutable std::mutex whole_object_mutex_;

    /// @brief The selected atoms.
	std::set< masala::core::chemistry::atoms::AtomInstanceCSP > atoms_;

    /// @brief The API definition for this class.
    masala::base::api::MasalaObjectAPIDefinitionCSP api_definition_;

}; // class AtomSelection

} // namespace atom_selection
} // namespace selection
} // namespace core
} // namespace masala

#endif // Masala_src_core_selection_atom_selection_AtomSelection_hh