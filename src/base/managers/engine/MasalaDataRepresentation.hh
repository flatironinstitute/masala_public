/*
    Masala
    Copyright (C) 2022 Vikram K. Mulligan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/// @file src/base/managers/engine/MasalaDataRepresentation.hh
/// @brief A pure virtual base class class for particular representations
/// of data that can be requested by engines for efficient manipulation of
/// those data.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).

#ifndef Masala_src_base_managers_engine_MasalaDataRepresentation_hh
#define Masala_src_base_managers_engine_MasalaDataRepresentation_hh

// Forward declarations:
#include <base/managers/engine/MasalaDataRepresentation.fwd.hh>

// Base headers:
#include <base/managers/plugin_module/MasalaPlugin.hh>
#include <base/managers/engine/MasalaDataRepresentationCreator.fwd.hh>

namespace masala {
namespace base {
namespace managers {
namespace engine {

/// @brief A pure virtual base class class for particular representations
/// of data that can be requested by engines for efficient manipulation of
/// those data.
/// @author Vikram K. Mulligan (vmulligan@flatironinstitute.org).
class MasalaDataRepresentation : public masala::base::managers::plugin_module::MasalaPlugin {

public:

////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTION, DESTRUCTION, AND CLONING
////////////////////////////////////////////////////////////////////////////////

	/// @brief Default constructor.
	MasalaDataRepresentation() = default;

	/// @brief Copy constructor.  Explicit due to mutex.
	MasalaDataRepresentation( MasalaDataRepresentation const & src );

	/// @brief Assignment operator.  Explicit due to mutex.
	MasalaDataRepresentation &
	operator=( MasalaDataRepresentation const & src );

	// Destructor.
	~MasalaDataRepresentation() override = default;

	/// @brief Get the namespace and name for this pure virtual base class.
	/// @returns "masala::base::managers::engine::MasalaDataRepresentation"
	static
	std::string
	class_namespace_and_name_static();

public:

////////////////////////////////////////////////////////////////////////////////
// DATA REPRESENTATION CATEGORIES, COMPATIBILITY, AND PROPERTIES FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

	/// @brief Get the categories that this data representation plugin falls into.
	/// @details Categories are hierarchical, with the hierarchy represented as a vector of
	/// strings.  One data representation category can be classified into multiple categories.
	/// @note Must be implemented by derived classes.  Generated by function call, so this does
	/// not return a const instance.
	virtual
	std::vector< std::vector< std::string > >
	get_data_representation_categories() const = 0;

	/// @brief Get the keywords that this data representation plugin has.
	/// @note Must be implemented by derived classes.  Generated by function call, so this does
	/// not return a const instance.
	virtual
	std::vector< std::string >
	get_data_representation_keywords() const = 0;

	/// @brief Get the MasalaEngines that with which this data representation plugin
	/// is DEFINITELY compatible.  (There may be other engines with which it is also
	/// compatible, so this is not necessarily an exhaustive list.)
	/// @note Must be implemented by derived classes.  The list is by full name (i.e.
	/// namespace + name), so for instance
	/// "specialized_masala_plugins::optimizers::SpecializedChargeOptimizer".
	virtual
	std::vector< std::string >
	get_compatible_masala_engines() const = 0;

	/// @brief Get the MasalaEngines that with which this data representation plugin
	/// is DEFINITELY NOT compatible.  (There may be other engines with which it is also
	/// not compatible, so this is not necessarily an exhaustive list.)
	/// @details The default implementation returns an empty list.
	/// @note Can be implemented by derived classes.  The list is by full name (i.e.
	/// namespace + name), so for instance
	/// "specialized_masala_plugins::optimizers::SpecializedChargeOptimizer".
	virtual
	std::vector< std::string >
	get_incompatible_masala_engines() const;

	/// @brief Get the properties that this MasalaDataRepresentation has.  (Note that this can be
	/// a non-exhaustive list.  If one data representation says it has the property
	/// "linearly-scaling", another could also be linearly scaling despite not listing this.)
	/// @note Can be overridden by derived classes.  The base implementation lists
	/// no properties.
	virtual
	std::vector< std::string >
	get_present_data_representation_properties() const;

	/// @brief Get the properties of this MasalaDataRepresentation that might possibly be present.
	/// @details Obviously, this is a non-exhuastive list.
	/// @returns The base class returns an empty list.  Overrides could return other lists.
	virtual
	std::vector< std::string >
	get_possibly_present_data_representation_properties() const;

	/// @brief Get the properties that this MasalaDataRepresentation DEFINITELY lacks.
	/// Note that this is inevitably a non-exhaustive list.
	/// @note Can be overridden by derived classes.  The base implementation lists
	/// no properties.
	virtual
	std::vector< std::string >
	get_absent_data_representation_properties() const;

	/// @brief Get the properties of this MasalaDataRepresentation that might possibly be absent.
	/// @details Obviously, this is a non-exhuastive list.
	/// @returns The base class returns an empty list.  Overrides could return other lists.
	virtual
	std::vector< std::string >
	get_possibly_absent_data_representation_properties() const;

	/// @brief Is this data representation empty?
	/// @details Calls protected_empty(), which must be implemented by derived classes.
	/// @returns True if no data have been loaded into this data representation, false otherwise.
	/// @note This does not report on whether the data representation has been configured; only whether it has been loaded with data.
	bool
	empty() const;

	/// @brief Remove the data loaded in this object.  Note that this does not result in the configuration being discarded.
	/// @details Calls protected_clear(), which must be implemented by derived classes.
	void
	clear();

	/// @brief Remove the data loaded in this object AND reset its configuration to defaults.
	/// @details Calls protected_reset(), which must be implemented by derived classes.
	void
	reset();

protected:

////////////////////////////////////////////////////////////////////////////////
// PROTECTED FUNCTIONS
////////////////////////////////////////////////////////////////////////////////

	/// @brief Allow derived classes to lock the mutex.
	inline std::mutex & data_representation_mutex() const { return data_representation_mutex_; }

	/// @brief Is this data representation empty?
	/// @details Must be implemented by derived classes.  Should return its value && the parent class protected_empty().  Performs no mutex-locking.
	/// @returns True if no data have been loaded into this data representation, false otherwise.
	/// @note This does not report on whether the data representation has been configured; only whether it has been loaded with data.
	virtual
	bool
	protected_empty() const = 0;

	/// @brief Remove the data loaded in this object.  Note that this does not result in the configuration being discarded.
	/// @details Must be implemented by derived classes, and should call parent class protected_clear().  Performs no mutex-locking.
	virtual
	void
	protected_clear() = 0;

	/// @brief Remove the data loaded in this object AND reset its configuration to defaults.
	/// @details Must be implemented by derived classes, and should call parent class protected_reset().  Performs no mutex-locking.
	virtual
	void
	protected_reset() = 0;


	/// @brief Called by the assignment operator and the copy constructor, this copies all data.  Must be implemented by
	/// derived classes.  Performs no mutex locking.
	/// @param src The object that we are copying from.
	virtual
	void
	protected_assign(
		MasalaDataRepresentation const & src
	);

private:

////////////////////////////////////////////////////////////////////////////////
// PRIVATE DATA
////////////////////////////////////////////////////////////////////////////////

	/// @brief A mutex for locking this data representation.  Mutable to allow locking in const contexts.
	mutable std::mutex data_representation_mutex_;

};

} // namespace engine
} // namespace managers
} // namespace base
} // namespace masala

#endif // Masala_src_base_managers_engine_MasalaDataRepresentation_hh