- [X] Remove functions from API classes.
     - [X] On second thought, let's keep these around.
     - [X] Figure out problem of MasalaObjectAPIDefinition persisting after the object that it describes is destroyed.  Observer?  Hand out a weak pointer to a MasalaObjectAPIDefinition cached in the object?
          - [X] I'll hand out a weak pointer.
- [X] Do API classes need to be templated?  YES.
- [X] Add namespace function to all instantiable objects.
- [X] Add JSON functions.
     - [X] To MasalaObjectAPIDefinition.
     - [X] To MasalaObjectAPIConstructorDefinition and derived classes.
     - [X] To MasalaObjectAPISetterDefinition and derived classes.
     - [X] To MasalaObjectAPIGetterDefinition and derived classes.
     - [X] To MasalaObjectAPIWorkFunctionDefinition and derived classes.
- [X] Add app to generate API description from class list.
- [X] Add Python code to generate API layer from API descriptions.
- [X] Add script and compilation of API layer to build script.
     - [X] Auto-include classes that need to be included.
     - [X] Auto-use API classes instead of manually-written classes when API classes are available.

- [ ] Think about ElementType and where it should go.  Can this be moved to core?
- [ ] Add a full PDB reader in the standard plugin library.

- [ ] Use ViennaCL for linear algebra.
- [ ] Replace std::set with std::vector.

- [X] Add test for string-trimming functions.  Include edge case of strings with only whitespace.

- [X] Add list of API classes somewhere --> A manager where API classes get registered.
     - [ ] Ensure that plugin classes defined in core (e.g. AtomSelector) get registered.
- [ ] Get rid of the EigenLinalgCartesianAtomCoordinateRepresentationCreator class.  This should be auto-generated.

- [X] In auto-generated code, we need to handle the case of a function that returns a lightweight Masala object directly:
     - [X] Add "stack-allocated" option to API function.
     - [X] If stack-allocated, ensure that we initialize the API container by passing in the object by reference (not an owning pointer to a copy of the object) when making the API object to output.
- [X] Handle enums in API auto-generated code.
     - [X] Need to find additional fwd.hh file where the enum is declared for .hh file.
     - [X] Need to NOT include .hh file for enum types in .cc file.
     - [X] Need to fix output type namespace (NOT in auto-generated code) in both .cc and .hh file.
     - [X] Need to NOT encapsulate output type in API container in .cc file.
     - [X] Need to ensure that additional forward declarations are copied.

- [ ] Add explicit conversion functions for API classes whose inner objects are related by inheritence.
     - [ ] Re-enable the selectors' generate_selection() functions.
- [ ] Add API functions for CostFunctionNetworkOptimizationSolution.
- [ ] Add API functions for OptimizationProblem and OptimizationSolution.
     - [ ] Allow APIs for pure virtual classes.
     - [ ] Define class inheritence for APIs (see above).

- [ ] Abort compilation with informative error message if Z inherits from Y inherits from X, and X and Z have APIs defined but Y does not.
- [ ] Use the code templates for the lightweight derived API classes.
- [ ] Framework for on-the-fly CostFunctionNetworkProblems.
     - [ ] Base class for CostFunctionNetworkProblem, that takes function pointer to a function for updating the cost function given a new selection.
     - [ ] Derived class for PrecomputedPairwiseCostFunctionNetworkProblem.  The update function can ALSO be used, for non-pairwise terms.
